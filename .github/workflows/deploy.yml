name: Deployment Pipeline

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests failed'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # BUILD AND PUSH DOCKER IMAGES
  # =============================================================================
  
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event.inputs.force_deploy == 'true' }}
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push base image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push microservice images
      run: |
        services=("market_data_service" "news_service" "feature_engineering_service" "sentiment_analysis_service" "signal_aggregation_service" "risk_management_service")
        paths=("services/data_ingestion" "services/data_ingestion" "services/processing" "services/processing" "services/strategy" "services/execution")
        
        for i in "${!services[@]}"; do
          service="${services[$i]}"
          path="${paths[$i]}"
          
          docker buildx build \
            --build-arg SERVICE_NAME="$service" \
            --build-arg SERVICE_PATH="$path" \
            --platform linux/amd64,linux/arm64 \
            --file docker/Dockerfile.microservice \
            --target production \
            --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:${{ github.sha }}" \
            --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:latest" \
            --push \
            .
        done

  # =============================================================================
  # STAGING DEPLOYMENT
  # =============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging' }}
    
    environment:
      name: staging
      url: https://staging.trading-platform.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to ECS Staging
      run: |
        # Update ECS service definitions with new image tags
        services=("market_data_service" "news_service" "feature_engineering_service" "sentiment_analysis_service" "signal_aggregation_service" "risk_management_service")
        
        for service in "${services[@]}"; do
          # Update task definition
          aws ecs describe-task-definition \
            --task-definition "trading-platform-$service-staging" \
            --query taskDefinition > task-def.json
          
          # Update image URI in task definition
          jq --arg IMAGE "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:${{ github.sha }}" \
             '.containerDefinitions[0].image = $IMAGE' \
             task-def.json > updated-task-def.json
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json
          
          # Update service
          aws ecs update-service \
            --cluster trading-platform-staging \
            --service "trading-platform-$service-staging" \
            --task-definition "trading-platform-$service-staging"
        done
    
    - name: Wait for deployment
      run: |
        services=("market_data_service" "news_service" "feature_engineering_service" "sentiment_analysis_service" "signal_aggregation_service" "risk_management_service")
        
        for service in "${services[@]}"; do
          aws ecs wait services-stable \
            --cluster trading-platform-staging \
            --services "trading-platform-$service-staging"
        done
    
    - name: Run smoke tests
      run: |
        # Basic health checks
        curl -f https://staging.trading-platform.com/health || exit 1
        
        # Service-specific health checks
        services=("market_data" "news" "feature_engineering" "sentiment_analysis" "signal_aggregation" "risk_management")
        
        for service in "${services[@]}"; do
          curl -f "https://staging.trading-platform.com/api/v1/$service/health" || exit 1
        done
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Staging deployment successful for commit ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # PRODUCTION DEPLOYMENT
  # =============================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: ${{ github.event.inputs.environment == 'production' }}
    
    environment:
      name: production
      url: https://trading-platform.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Manual approval checkpoint
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.PRODUCTION_APPROVERS }}
        minimum-approvals: 2
        issue-title: "Production Deployment Approval Required"
        issue-body: |
          Please review the staging deployment and approve production deployment.
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          **Staging URL:** https://staging.trading-platform.com
          
          **Changes:**
          ${{ github.event.head_commit.message }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Blue-Green deployment preparation
      run: |
        # Create new target group for blue-green deployment
        aws elbv2 create-target-group \
          --name trading-platform-green-${{ github.run_number }} \
          --protocol HTTP \
          --port 80 \
          --vpc-id ${{ secrets.VPC_ID }} \
          --health-check-path /health \
          --health-check-interval-seconds 30 \
          --healthy-threshold-count 2 \
          --unhealthy-threshold-count 3
    
    - name: Deploy to Production (Blue-Green)
      run: |
        services=("market_data_service" "news_service" "feature_engineering_service" "sentiment_analysis_service" "signal_aggregation_service" "risk_management_service")
        
        for service in "${services[@]}"; do
          # Create new service with green target group
          aws ecs create-service \
            --cluster trading-platform-production \
            --service-name "trading-platform-$service-green" \
            --task-definition "trading-platform-$service-production" \
            --desired-count 2 \
            --load-balancers targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/trading-platform-green-${{ github.run_number }}/$(aws elbv2 describe-target-groups --names trading-platform-green-${{ github.run_number }} --query 'TargetGroups[0].TargetGroupArn' --output text | cut -d'/' -f2),containerName=$service,containerPort=8000
        done
    
    - name: Health check and traffic switch
      run: |
        # Wait for green deployment to be healthy
        sleep 120
        
        # Check health of green deployment
        for i in {1..10}; do
          if curl -f https://green.trading-platform.com/health; then
            echo "Green deployment is healthy"
            break
          fi
          sleep 30
        done
        
        # Switch traffic to green deployment
        aws elbv2 modify-listener \
          --listener-arn ${{ secrets.PRODUCTION_LISTENER_ARN }} \
          --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/trading-platform-green-${{ github.run_number }}
    
    - name: Cleanup old deployment
      run: |
        # Wait for traffic to stabilize
        sleep 300
        
        # Delete old blue services
        services=("market_data_service" "news_service" "feature_engineering_service" "sentiment_analysis_service" "signal_aggregation_service" "risk_management_service")
        
        for service in "${services[@]}"; do
          aws ecs delete-service \
            --cluster trading-platform-production \
            --service "trading-platform-$service-blue" \
            --force
        done
        
        # Rename green to blue for next deployment
        for service in "${services[@]}"; do
          aws ecs update-service \
            --cluster trading-platform-production \
            --service "trading-platform-$service-green" \
            --service-name "trading-platform-$service-blue"
        done
    
    - name: Post-deployment verification
      run: |
        # Comprehensive health checks
        curl -f https://trading-platform.com/health || exit 1
        
        # Performance baseline check
        curl -f https://trading-platform.com/api/v1/performance/baseline || exit 1
        
        # Database connectivity check
        curl -f https://trading-platform.com/api/v1/system/database-health || exit 1
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🚀 Production deployment successful for commit ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # ROLLBACK CAPABILITY
  # =============================================================================
  
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Rollback to previous version
      run: |
        # Get previous stable version
        PREVIOUS_VERSION=$(aws ecs describe-services \
          --cluster trading-platform-production \
          --services trading-platform-market-data-service-blue \
          --query 'services[0].taskDefinition' \
          --output text | sed 's/.*://')
        
        # Rollback all services
        services=("market_data_service" "news_service" "feature_engineering_service" "sentiment_analysis_service" "signal_aggregation_service" "risk_management_service")
        
        for service in "${services[@]}"; do
          aws ecs update-service \
            --cluster trading-platform-production \
            --service "trading-platform-$service-blue" \
            --task-definition "trading-platform-$service-production:$((PREVIOUS_VERSION-1))"
        done
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "⚠️ Deployment failed, rollback initiated for commit ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
