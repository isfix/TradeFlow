name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # =============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -r requirements.txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check --short-report
      continue-on-error: true
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=cyclonedx-json --output=sbom.json
      continue-on-error: true
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json
          sbom.json

  # =============================================================================
  # CODE SECURITY SCANNING
  # =============================================================================
  
  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep
        pip install -r requirements.txt
    
    - name: Run Bandit security scan
      run: |
        bandit -r trading_platform/ \
          -f json \
          -o bandit-report.json \
          -ll \
          --exclude trading_platform/tests/
        
        bandit -r trading_platform/ \
          -f sarif \
          -o bandit-results.sarif \
          --exclude trading_platform/tests/
      continue-on-error: true
    
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto \
          --json \
          --output=semgrep-report.json \
          trading_platform/
        
        semgrep --config=auto \
          --sarif \
          --output=semgrep-results.sarif \
          trading_platform/
      continue-on-error: true
    
    - name: Upload SARIF results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: |
          bandit-results.sarif
          semgrep-results.sarif
    
    - name: Upload security scan reports
      uses: actions/upload-artifact@v3
      with:
        name: code-security-reports
        path: |
          bandit-report.json
          bandit-results.sarif
          semgrep-report.json
          semgrep-results.sarif

  # =============================================================================
  # SECRETS SCANNING
  # =============================================================================
  
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run GitLeaks secrets scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # =============================================================================
  # DOCKER IMAGE SECURITY SCANNING
  # =============================================================================
  
  docker-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: production
        tags: trading-platform:scan
        load: true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'trading-platform:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
    
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: "trading-platform:scan"
        fail-build: false
        severity-cutoff: high
        output-format: sarif
        output-file: grype-results.sarif
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-results.sarif
          trivy-fs-results.sarif
          grype-results.sarif

  # =============================================================================
  # INFRASTRUCTURE SECURITY SCANNING
  # =============================================================================
  
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov IaC security scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,docker_compose,kubernetes,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif
        quiet: true
        soft_fail: true
    
    - name: Run Hadolint Dockerfile linter
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: docker/Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true
    
    - name: Upload infrastructure scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          checkov-results.sarif
          hadolint-results.sarif

  # =============================================================================
  # COMPLIANCE AND POLICY CHECKS
  # =============================================================================
  
  compliance-check:
    name: Compliance and Policy Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for required security files
      run: |
        required_files=(
          ".gitignore"
          ".env.example"
          "SECURITY.md"
          "docker/.dockerignore"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "Missing required security files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "All required security files present"
    
    - name: Check for hardcoded secrets patterns
      run: |
        # Check for common secret patterns
        secret_patterns=(
          "password\s*=\s*['\"][^'\"]{8,}['\"]"
          "api_key\s*=\s*['\"][^'\"]{20,}['\"]"
          "secret\s*=\s*['\"][^'\"]{16,}['\"]"
          "token\s*=\s*['\"][^'\"]{20,}['\"]"
        )
        
        violations=()
        for pattern in "${secret_patterns[@]}"; do
          if grep -r -E -i "$pattern" trading_platform/ --exclude-dir=tests; then
            violations+=("Found potential hardcoded secret: $pattern")
          fi
        done
        
        if [[ ${#violations[@]} -gt 0 ]]; then
          echo "Security violations found:"
          printf '%s\n' "${violations[@]}"
          exit 1
        fi
        
        echo "No hardcoded secrets detected"
    
    - name: Check Docker security best practices
      run: |
        # Check Dockerfile for security best practices
        dockerfile_checks=(
          "USER.*root"  # Should not run as root
          "COPY.*\*"    # Avoid copying everything
          "ADD.*http"   # Avoid ADD with URLs
        )
        
        violations=()
        for check in "${dockerfile_checks[@]}"; do
          if grep -E "$check" docker/Dockerfile; then
            violations+=("Dockerfile security issue: $check")
          fi
        done
        
        if [[ ${#violations[@]} -gt 0 ]]; then
          echo "Dockerfile security violations:"
          printf '%s\n' "${violations[@]}"
          exit 1
        fi
        
        echo "Dockerfile security checks passed"

  # =============================================================================
  # SECURITY REPORT GENERATION
  # =============================================================================
  
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan, docker-security-scan, infrastructure-scan, compliance-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check if any jobs failed
        if [[ "${{ needs.dependency-scan.result }}" == "failure" ]]; then
          echo "❌ Dependency scan failed" >> security-summary.md
        else
          echo "✅ Dependency scan passed" >> security-summary.md
        fi
        
        if [[ "${{ needs.code-security-scan.result }}" == "failure" ]]; then
          echo "❌ Code security scan failed" >> security-summary.md
        else
          echo "✅ Code security scan passed" >> security-summary.md
        fi
        
        if [[ "${{ needs.secrets-scan.result }}" == "failure" ]]; then
          echo "❌ Secrets scan failed" >> security-summary.md
        else
          echo "✅ Secrets scan passed" >> security-summary.md
        fi
        
        if [[ "${{ needs.docker-security-scan.result }}" == "failure" ]]; then
          echo "❌ Docker security scan failed" >> security-summary.md
        else
          echo "✅ Docker security scan passed" >> security-summary.md
        fi
        
        if [[ "${{ needs.infrastructure-scan.result }}" == "failure" ]]; then
          echo "❌ Infrastructure scan failed" >> security-summary.md
        else
          echo "✅ Infrastructure scan passed" >> security-summary.md
        fi
        
        if [[ "${{ needs.compliance-check.result }}" == "failure" ]]; then
          echo "❌ Compliance check failed" >> security-summary.md
        else
          echo "✅ Compliance check passed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "- Review all security scan results" >> security-summary.md
        echo "- Address any high/critical vulnerabilities" >> security-summary.md
        echo "- Update dependencies with security patches" >> security-summary.md
        echo "- Review and update security policies" >> security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
    
    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
